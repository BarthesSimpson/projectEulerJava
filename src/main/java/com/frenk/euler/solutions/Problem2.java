package com.frenk.euler.solutions;

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

class Problem2 {

  private static class Solver {

    private int MAX_FIB;

    Solver(int maxFib) {
      this.MAX_FIB = maxFib;
    }

    private int nextFib(int i, int j) {
      return i + j;
    }

    public int solve() {
      int sum = 0;
      int currentFib = 1;
      int nextFib = 2;
      int tmp;

      while (nextFib <= MAX_FIB) {
        tmp = nextFib;
        nextFib = nextFib(currentFib, nextFib);
        currentFib = tmp;
        if (currentFib % 2 == 0) {
          sum += currentFib;
        }
      }
      return sum;
    }
  }

  public static void main(String[] args) {
    System.out.println(new Solver(10).solve()); // should be 10
    long startTime = System.nanoTime();
    System.out.println(new Solver(4_000_000).solve());
    long endTime = System.nanoTime();
    System.out.println(String.format("Total runtime: %f ms", 1.0 / 1_000_000 * (endTime - startTime)));
  }
}